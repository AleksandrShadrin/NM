@page "/inaccuracy"
@using System.Text.Json
@inject IInaccuracyFinder _inaccuracyFinder
@inject IDUSolver _duSolver

<div class="container">
    <div class="row">
        <h3 class="text-center">Погрешность в точках</h3>
        <LineChart @ref="pointsChart" TItem="Point" Options="pointsChartOptions" />
    </div>
</div>
@code {
    LineChart<Point> pointsChart;

    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

    LineChartOptions pointsChartOptions = new()
        {
            Parsing = new ChartParsing
            {
                XAxisKey = "x",
                YAxisKey = "y"
            },
            Scales = new ChartScales
            {
                X = new ChartAxis
                {
                    Type = "linear",
                    Title = new ChartScaleTitle
                    {
                        Text = "lg(N)",
                        Display = true,
                    },
                },
                Y = new ChartAxis
                {
                    Title = new ChartScaleTitle
                    {
                        Display = true,
                        Text = "погрешность, * 10"
                    },
                }
            },

        };
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await pointsChart.Clear();
        UpdateChart();
    }

    private async Task UpdateChart()
    {
        _duSolver.ConfigureOptions(opt => opt.P = 1);
        var points = Enumerable.Range(3, 12)
                            .Select(i => _inaccuracyFinder
                                .GetInaccuracyOfImplicitAdamsMethod(Convert.ToInt32(Math.Pow(2, i))) with
                                { X = Math.Log10(Math.Pow(2, i)) })
                            .Select(v => v with { Y = v.Y * 10 })
                            .ToList();

        await pointsChart.AddDataSet(
            new LineChartDataset<Point>
                {
                    Label = "Погрешность неявного метода",
                    BackgroundColor = backgroundColors[1],
                    BorderColor = borderColors[2],
                    Fill = false,
                    PointRadius = 3,
                    CubicInterpolationMode = "monotone",
                    Data = points
                });

        _duSolver.ConfigureOptions(opt => opt.P = 4);
        points = Enumerable.Range(3, 12)
                    .Select(i => _inaccuracyFinder
                        .GetInaccuracyOfExplicitAdamsMethod(Convert.ToInt32(Math.Pow(2, i))) with
                        { X = Math.Log10(Math.Pow(2, i)) })
                    .Select(v => v with { Y = v.Y * 10 })
                    .ToList();

        await pointsChart.AddDataSet(
            new LineChartDataset<Point>
                {
                    Label = "Погрешность явного метода",
                    BackgroundColor = backgroundColors[2],
                    BorderColor = borderColors[3],
                    Fill = false,
                    PointRadius = 3,
                    CubicInterpolationMode = "monotone",
                    Data = points
                });

        _duSolver.ConfigureOptions(opt => opt.P = 1);
        points = Enumerable.Range(3, 12)
                    .Select(i => _inaccuracyFinder
                        .GetInaccuracyOfMethodRunge(Convert.ToInt32(Math.Pow(2, i))) with
                        { X = Math.Log10(Math.Pow(2, i)) })
                    .Select(v => v with { Y = v.Y * 10 })
                    .ToList();

        await pointsChart.AddDataSet(
            new LineChartDataset<Point>
                {
                    Label = "Погрешность метода рунге",
                    BackgroundColor = backgroundColors[3],
                    BorderColor = borderColors[4],
                    Fill = false,
                    PointRadius = 3,
                    CubicInterpolationMode = "monotone",
                    Data = points
                });
        await pointsChart.Update();
    }
}
