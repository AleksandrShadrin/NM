@page "/all-methods-with-founded-tow"

@using System.Text.Json
@inject IInaccuracyFinder _inaccuracyFinder
@inject IDUSolver _duSolver

<div class="container">
    <div class="row">
        <h3 class="text-center">Все методы</h3>
        <LineChart @ref="pointsChart" TItem="Point" Options="pointsChartOptions" />
    </div>
</div>
<div class="row justify-content-center">
    <div class="col-9">
        <AA.Presentation.Blazor.RazorComponents.InfoTable />
    </div>
</div>
@code {
    LineChart<Point> pointsChart;

    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

    LineChartOptions pointsChartOptions = new()
        {
            Parsing = new ChartParsing
            {
                XAxisKey = "x",
                YAxisKey = "y"
            },
            Scales = new ChartScales
            {
                X = new ChartAxis
                {
                    Type = "linear",
                    Title = new ChartScaleTitle
                    {
                        Text = "X",
                        Display = true,
                    }
                },
                Y = new ChartAxis
                {
                    Title = new ChartScaleTitle
                    {
                        Display = true,
                        Text = "Y"
                    },
                }
            },

        };
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await pointsChart.Clear();
        UpdateChart();
    }

    private async Task UpdateChart()
    {
        _duSolver.FindTowUsingImplicitAdamsMethod();
        var points = _duSolver.ImplicitAdamsMethod()
                    .Select(p => p with { X = Math.Round(p.X, 5) })
                    .ToList();

        await pointsChart.AddDataSet(
            new LineChartDataset<Point>
                {
                    Label = "Неявный метод адамса, (m = 1)",
                    BackgroundColor = backgroundColors[1],
                    BorderColor = borderColors[2],
                    Fill = false,
                    PointRadius = 0,
                    CubicInterpolationMode = "monotone",
                    Data = points
                });

        _duSolver.FindTowUsingExplicitAdamsMethod();
        points = _duSolver.ExplicitAdamsMethod()
                    .Select(p => p with { X = Math.Round(p.X, 5) })
                    .ToList();

        await pointsChart.AddDataSet(
            new LineChartDataset<Point>
                {
                    Label = "Явный метод Адамса, (m = 4)",
                    BackgroundColor = backgroundColors[2],
                    BorderColor = borderColors[3],
                    Fill = false,
                    PointRadius = 0,
                    CubicInterpolationMode = "monotone",
                    Data = points
                });

        _duSolver.FindTowUsingMethodRunge();
        points = _duSolver.MethodRunge()
                    .Select(p => p with {X = Math.Round(p.X, 5)})
                    .ToList();

        await pointsChart.AddDataSet(
            new LineChartDataset<Point>
                {
                    Label = "Метод Эйлера",
                    BackgroundColor = backgroundColors[3],
                    BorderColor = borderColors[4],
                    Fill = false,
                    PointRadius = 0,
                    CubicInterpolationMode = "monotone",
                    Data = points
                });
        await pointsChart.Update();
    }
}
